---
layout: post
title: 웹 서버 기초
date: 2021-09-07 17:16:55 +0300
image: /assets/images/blog/post-5.jpg
author: hanna
tags: frontend
---

## Mini Node Server

브라우저에는 서버에 요청을 보내기 위해 fetch 같은 HTTP 요청을 보내는 도구가 기본적으로 내장되어 있다.
서버는 클라이언트(브라우저)의 HTTP 요청에 알맞는 응답을 보낼 수 있도록 코드를 작성해야하는데, node.js는 HTTP 요청을 보내거나, 응답을 받을 수 있는 도구를 제공한다.
HTTP 요청을 처리하고 응답을 보내 주는 프로그램을 웹 서버(Web Server)라고 부른다.

## HTTP 트랜잭션 해부

# 서버 생성

모든 node 웹 서버 애플리케이션은 웹 서버 객체를 만들어야 한다. 이 때 createServer를 해야한다.

<pre>
<code>
const http = require('http');

const server = http.createServer((request, response) => {
// 여기서 작업이 진행됩니다!
});
</pre>
</code>

이 서버로 오는 HTTP 요청마다 createServer에 전달된 함수가 한 번씩 호출된다. 사실 createServer가 반환한 Server 객체는 EventEmitter이고 여기서는 server 객체를 생성하고 리스너를 추가하는 축약 문법을 사용한 것이다.

<pre>
<code>
const server = http.createServer();
server.on('request', (request, response) => {
// 여기서 작업이 진행됩니다!
});
</pre>
</code>

HTTP 요청이 서버에 오면 node가 트랜잭션을 다루려고 request와 response 객체를 전달하며 요청 핸들러 함수를 호출한다.

요청을 실제로 처리하려면 listen 메서드가 server 객체에서 호출되어야 하는데 대부분은 서버가 사용하고자 하는 포트 번호를 listen에 전달하기만 하면 된다.

# 메서드, URL, 헤더

요청을 처리할 때, 우선은 메서드와 URL을 확인한 후 이와 관련된 적절한 작업을 실행하려고 할 것이다. Node가 request 객체에 유용한 프로퍼티를 넣어두었으므로 이 작업은 비교적 쉽게 할 수 있다.

const { method, url } = request;
주의: request 객체는 IncomingMessage의 인스턴스.

여기서 method는 항상 일반적인 HTTP 메서드/동사가 될 것이다. url은 전체 URL에서 서버, 프로토콜, 포트를 제외한 것으로, 세 번째 슬래시 이후의 나머지 전부라고 볼 수 있다.

헤더도 request에 headers라는 전용 객체가 있다.

<pre>
<code>
const { headers } = request;
const userAgent = headers['user-agent'];
</pre>
</code>

클라이언트가 어떻게 헤더를 설정했는지에 관계없이 모든 헤더는 소문자로만 표현된다는 것을 기억해야 합니다. 이는 어떤 목적이든 헤더를 파싱하는 작업을 간편하게 해준다.

일부 헤더를 반복해서 설정한다면 이 값은 헤더에 따라 덮어씌워지거나 콤마로 구분된 문자열로 합쳐집니다. 이게 문제가 될 경우에는 rawHeaders를 사용할 수도 있습니다.

# 요청 바디

POST나 PUT 요청을 받을 때 애플리케이션에 요청 바디는 중요할 것이다. 요청 헤더에 접근하는 것보다 바디 데이터를 받는 것은 좀 더 어렵다. 핸들러에 전달된 request 객체는 ReadableStream 인터페이스를 구현하고 있다. 이 스트림에 이벤트 리스너를 등록하거나 다른 스트림에 파이프로 연결할 수 있다. 스트림의 'data'와 'end' 이벤트에 이벤트 리스너를 등록해서 데이터를 받을 수 있다.

각 'data' 이벤트에서 발생시킨 청크는 Buffer이다. 이 청크가 문자열 데이터라는 것을 알고 있다면 이 데이터를 배열에 수집한 다음 'end' 이벤트에서 이어 붙인 다음 문자열로 만드는 것이 가장 좋다.

<pre>
<code>
let body = [];
request.on('data', (chunk) => {
body.push(chunk);
}).on('end', () => {
body = Buffer.concat(body).toString();
// 여기서 `body`에 전체 요청 바디가 문자열로 담겨있습니다.
});
</pre>
</code>

주의: 이 코드가 약간 장황할 수도 있다. 다행히 npm에 concat-stream나 body 같은 모듈로 이 로직을 감출 수 있다. 이어서 읽기 전에 어떤 작업이 이뤄지는지 잘 이해하는 것이 중요합니다.

# 오류에 대한 간단한 설명

request 객체가 ReadableStream이므로 EventEmitter이기도 하고 오류가 발생했을 때 EventEmitter처럼 동작한다.

request 스트림의 오류가 발생하면 스트림에서 'error' 이벤트가 발생하면서 오류를 전달한다. 이벤트에 리스너가 등록되어 있지 않다면 Node.js 프로그램을 종료시킬 수도 있는 오류를 던질수 있다. 그러므로 단순히 오류를 로깅만 하더라도 요청 스트림에 'error' 리스너를 추가해야 한다.

request.on('error', (err) => {
// 여기서 `stderr`에 오류 메시지와 스택 트레이스를 출력합니다.
console.error(err.stack);
});
별도의 추상화나 도구를 이용해서 오류를 처리하는 다른 방법도 존재하지만, 항상 오류는 발생할 수 있다는 것을 명심하고 오류를 처리해야 합니다.

# HTTP 상태 코드

따로 설정하지 않으면 응답의 HTTP 상태 코드는 항상 200이다. 물론 모든 HTTP 응답이 이를 보장하는 것은 아니고 어떤 경우에는 다른 상태 코드를 보내기를 원할 것이고, 상태 코드를 변경하려면 statusCode 프로퍼티를 설정해야 한다

response.statusCode = 404; // 클라이언트에게 리소스를 찾을 수 없다고 알려줌.
이에 대한 단축 설정도 있는데 곧 살펴볼 것이다.

응답 헤더 설정
편리한 setHeader 메서드로 헤더를 설정한다.

response.setHeader('Content-Type', 'application/json');
response.setHeader('X-Powered-By', 'bacon');
응답에 헤더를 설정할 때 헤더 이름의 대소문자는 중요하지 않음. 헤더를 여러 번 설정한다면 마지막에 설정한 값을 보낼 것.

명시적인 헤더 데이터 전송
지금까지 설명한 헤더와 상태 코드를 설정하는 메서드는 "암묵적인 헤더"를 사용하고 있다고 가정. 이는 바디 데이터를 보내기 전 적절한 순간에 헤더를 보내는 일을 노드에 의존하고 있다는 의미.

헤더를 작성하는 writeHead 메서드가 있음. 이 메서드는 스트림에 상태 코드와 헤더를 작성함.

<pre>
<code>
response.writeHead(200, {
'Content-Type': 'application/json',
'X-Powered-By': 'bacon'
});
</pre>
</code>
(암묵적이든 명시적이든) 일단 헤더를 설정하고 나면 응답 데이터를 전송할 준비가 된 것입니다.

응답 바디 전송
response 객체는 WritableStream이므로 클라이언트로 보내는 응답 바디는 일반적인 스트림 메서드를 사용해서 작성합니다.

<pre>
<code>
response.write('<html>');
response.write('<body>');
response.write('<h5>Hello, World!</h5>');
response.write('</body>');
response.write('</html>');
response.end();
</pre>
</code>
스트림의 end 함수에 스트림에 보낼 데이터의 마지막 비트를 선택적으로 전달할 수 있으므로 위의 예제는 다음과 같이 간단하게 작성할 수 있습니다.

response.end('<html><body><h5>Hello, World!</h5></body></html>');
주의: 바디에 데이터 청크를 작성하기 전에 상태 코드와 헤더를 설정해야 합니다. HTTP 응답에서 바디 전에 헤더가 있으므로 이는 이치에 맞습니다.

오류에 대한 추가 설명
response 스트림도 'error' 이벤트를 발생시킬 수 있고 때로는 이 오류도 처리해야 합니다. request 스트림 오류에 대한 모든 설명이 여기서도 똑같이 적용됩니다.

지금까지 배운 내용을 사용한 예제
HTTP 응답 만드는 방법을 배웠으니 이제 모든 것을 함께 사용해 보겠습니다. 이전에 본 예제에서 사용자가 서버에 보낸 모든 데이터를 다시 보내는 서버를 만들 것입니다. JSON.stringify를 사용해서 데이터를 JSON으로 포매팅할 것입니다.

<pre>
<code>
const http = require('http');

http.createServer((request, response) => {
const { headers, method, url } = request;
let body = [];
request.on('error', (err) => {
console.error(err);
}).on('data', (chunk) => {
body.push(chunk);
}).on('end', () => {
body = Buffer.concat(body).toString();
// 여기서부터 새로운 부분입니다.

    response.on('error', (err) => {
      console.error(err);
    });

    response.statusCode = 200;
    response.setHeader('Content-Type', 'application/json');
    // 주의: 위 두 줄은 다음 한 줄로 대체할 수도 있습니다.
    // response.writeHead(200, {'Content-Type': 'application/json'})

    const responseBody = { headers, method, url, body };

    response.write(JSON.stringify(responseBody));
    response.end();
    // 주의: 위 두 줄은 다음 한 줄로 대체할 수도 있습니다.
    // response.end(JSON.stringify(responseBody))

    // 새로운 부분이 끝났습니다.

});
}).listen(8080);
</pre>
</code>
